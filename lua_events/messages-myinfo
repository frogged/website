~NOTOC~
VH_OnParsedMsgChat
------------------
Method is called when a incoming chat <code>message</code> arrives from user with <code>nick</code>. Return false to ignore the protocol message and not to send it to all users, otherwise return true. For example:

        function VH_OnParsedMsgChat (nick, data)
             if nick == 'Mario' then
                 VH:SendToOpChat('MARIO has just wrote: "' .. data .. '"');
             end
             return 1
        end

**Input parameters:** **1=** nick, **2=** message.

VH_OnParsedMsgPM
---------------------------
Method is called when a incoming private <code>message</code> is sent to <code>dest</code> from user with <code>nick</code>. Return false to ignore the protocol message and not to send it to the user, otherwise return true. For example:

        function VH_OnParsedMsgPM (nick, data, dest)
             if nick == 'Mario' then
                 VH:SendToOpChat('MARIO has just wrote to ' .. dest ..' : "' .. data .. '"');
             end
             return 1
        end

**Input parameters:** **1=** nick, **2=** message, **3=** dest

VH_OnParsedMsgSearch
------------------
Method is called when $Search message arrives from user with <code>nick</code> with <code>data</code>. This event cannot be discarded. For example:

        function VH_OnParsedMsgSearch (nick, data)
             if nick == 'Mario' then
                 VH:SendToOpChat('New $Search message from MARIO: "' .. data .. '"');
             end
             return 1
       end

**Input parameters:** **1=** nick, **2=** data. 

VH_OnUnknownMsg
------------------
This method is called when a no-NMDC protocol <code>message</code> arrives from user with <code>nick</code>. If <code>nick</code> is empty the method will return the <code>ip</code>. Specifies with third argument <code>is_nick</code> if it should be used the nick or IP. This event cannot be discarded. For example:

       function VH_OnUnknownMsg (nick, message, 1)
             VH:SendToOpChat('A new unknown message arrives from "' .. nick .. '": "' .. data .. '"');
             return 1
       end

**Input parameters:** **1=** nick/ip, **2=** message, **3=** is_nick 

VH_OnParsedMsgAny
------------------
This method is called when **any** type of <code>data</code> arrives from user with <code>nick</code> to the hub. For example when hub pinger enters in the hub:

       function VH_OnParsedMsgAny (nick, message)
             VH:SendToOpChat('nick: "' .. nick .. '" data: ' .. data);
             return 1
       end

you will see:

       nick: "dchublist" data: $BotINFO DcHublistPinger
       nick: "dchublist" data: $Version 1,0091
       nick: "dchublist" data: $GetNickList
       nick: "dchublist" data: $MyINFO $ALL dchublist DcHublistPinger<++ V:0.761,M:A,H:0/0/1,S:5>$ $Cable1$admin@dchublist.com$163353712394$

Return false to ignore the protocol message otherwise return true. Please <span class="label label-info">be carefull</span> with this event.

> Please notice that this method is slighty different from OnParsedMsg* methods because this one is called before the message is processed as a protocol message.

**Input parameters:** **1=** nick, **2=** data

VH_OnParsedMsgConnectToMe
------------------------
This method is called when a ConnectToMe data arrives from user with <code>nick</code> to <code>other_nick</code>. The method also provides the <code>ip</code> and <code>port</code> of the destination. For example:

       function VH_OnParsedMsgConnectToMe (nick, other_nick, ip, port)
             VH:SendToOpChat('New CTM from "' .. nick .. '": $ConnectToMe " .. other_nick.. " " .. ip .. ":" .. port);
             return 1
       end

> $ConnectToMe message is sent by the user <code>nick</code> to user <code>other_nick</code> in order to initiate a connection at the destination <code>ip</code>:<code>port</code>.

**Input parameters:** **1=** nick, **2=** othernick, **3=** ip, **4=** port

VH_OnParsedMsgRevConnectToMe
------------------------
This method is called when <code>nick</code> sends a RevConnectToMe data to <code>other_nick</code>. Return false to ignore the protocol message and not to send it, otherwise return true. For example:

       function VH_OnParsedMsgRevConnectToMe (nick, other_nick)
             VH:SendToOpChat('"' .. nick .. '" has just sent a $RevConnectToMe to ' .. other_nick .. '"');
             VH:SendToOpChat('$RevConnectToMe ' .. nick .. ' ' .. other_nick);
             return 1
       end

> $RevConnectToMe message is sent by the passive user <code>nick</code> to the active user <code>other_nick</code> in order to ask him to send the $ConnectToMe message.

**Input parameters:** **1=** nick, **2=** other_nick

VH_OnParsedMsgSR
----------------
This method is called when an incoming <code>search_reply</code> arrives from a user with <code>nick</code>. Return false to ignore the protocol message otherwise return true.

> $SR message is sent by a client as a search reply to a previous $Search message

**Input parameters:** **1=** nick, **2=** search_reply

VH_OnParsedMsgMyINFO
----------------
Called when $MyINFO <code>data</code> arrives to the hub from <code>nick</code>. Return false to ignore the protocol message otherwise return true. For example:

        function VH_OnParsedMsgMyINFO (nick, data)
             VH:SendToOpChat('New MyINFo from "' .. nick .. '": ' .. data);
             return 1
        end

If user Mario enters in the hub you will read in OPChat:

         New MyINFO from "Mario": $MyINFO $ALL Mario  <EiskaltDC++ V:2.2.7,M:A,H:0/0/3,S:3>$ $20$$15012006720$

**Input parameters:** **1=** nick, **2=** data

VH_OnParsedMsgSupport
----------------
This method is called when a $Support message with <code>data</code> arrives from user with <code>nick</code>. Return false to ignore the protocol message otherwise return true.

> $Supports message is used to negotiate protocol extensions, to indicate what extended features a client possesses. 

**Input parameters:** **1=** nick, **2=** data

VH_OnParsedMsgMyPass
----------------
This method is called when $MyPass message arrives from user with <code>nick</code>. It provides also the sent password in the <code>data</code> variable. Return false to ignore the protocol message otherwise return true. For example:

        function VH_OnParsedMsgMyPass (nick, data)
             VH:SendToOpChat('User "' .. nick .. '" has just typed his password: ' .. data);
             return 1
        end

> $MyPass message is sent by  <code>nick</code> to the hub in response to $GetPass message and contains the password in the plain text format.

**Input parameters:** **1=** nick, **2=** data

VH_OnParsedMsgValidateNick
----------------
This method is called when a $ValidateNick message arrives from <code>ip</code> with <code>nick</code>. Return false to ignore the protocol message otherwise return true.

> ValidateNick message is sent by the client to the hub, after the client has received the $Key message.

**Input parameters:** **1=** ip, **2=** nick

VH_OnParsedMsgMCTo
----------------
This method is called when a new main chat <code>message</code> is parsed. Message is sent by <code>nick</code> to <code>target_nick</code>. This method can be useful for anti-spam check.

**Input parameters:** **1=** nick, **2=** message, **3=** target_nick

VH_OnParsedMsgAnyEx
----------------
This method is called when user with <code>ip</code> sends <code>data</code> to the hub before login is completed. Return false to ignore the protocol message otherwise return true.

**Input parameters:** **1=** ip, **2=** data

VH_OnParsedMsgBotINFO
----------------
This method is called when a $BotINFO message arrives from hublist pinger from user with <code>nick</code> with <code>data</code>. Return false to ignore the protocol message otherwise return true. For example:

        function VH_OnParsedMsgBotINFO (nick, data)
             VH:SendToOpChat('Pinger "' .. nick .. '" has just sent: ' .. data);
             return 1
        end

you will read in OPChat:

        Pinger "dchublist" has just sent: $BotINFO DcHublistPinger

**Input parameters:** **1=** nick, **2=**data

VH_OnParsedMsgVersion
----------------
This method is called when a $Version message arrives from <code>ip</code> with <code>data</code>, where data represents the version of the DC client. Return false to ignore the protocol message otherwise return true. For example:

> $Version message is sent by a client to a hub in response to the $Hello message sent by a hub.

**Input parameters:** **1=** ip, **2=** data

VH_OnFirstMyINFO
----------------
This method is called when user with  <code>nick</code> sends first $MyINFO during handshake. Additional information is returned.

**Input parameters:** **1=** nick, **2=** description+tag, **3=** speed+status, **4=** email, **5=** sharesize

VH_OnValidateTag
----------------
This method is called when a <code>tag</code> is parsed and validated from user with <code>nick</code>. Return false to close the user connection, otherwise return true.

**Input parameters:** **1=** nick, **2=** tag


> **Note** that in LUA functions you must put return 1 on the end of the function otherwise the hub will discard the action. 

> The input parameters are always strings and they never contains end-pipe

> You can also use **_PLUGINVERSION** or **_HUBVERSION** global variable which will give the plugin and VerliHub version respectively 
