~NOTOC~
VH_OnOperatorKicks
------------------
This method is called when an operator makes a new kick. It returns the op who executed the command, the kicked user's<code>nick</code> and the kick <code>reason</code>. Return false to ignore the kick, otherwise return true. For example:

        function VH_OnOperatorKicks (op, nick, reason)
             VH:SendToOpChat('LOGGER: ' .. op .. ' has just kicked "' .. nick ..'" with reason: "' .. class .. '"');
             return 1;
        end

**Input parameters:** **1=** op, **2=** nick, **3=** reason

VH_OnOperatorDrops
------------------
This method is called when an operator drops a user using the !drop command. It returns the <code>op</code> who executed the command and user's <code>nick</code>. Return false to ignore the drop, otherwise return true. For example:

        function VH_OnOperatorDrops (op, nick)
              VH:SendToOpChat('LOGGER: ' .. op .. ' has just dropped "' .. nick .. '"');
              return 1;
        end

**Input parameters:** **1=** op, **2=** nick

VH_OnNewBan
------------------
This method is called when an operator bans a user. It returns the <code>op</code> who executed the command, the user's <code>nick</code> and <code>ip</code> and the ban <code>reason</code>. For example:

        function VH_OnNewBan (op, ip, nick, reason)
              VH:SendToOpChat('LOGGER: ' .. op .. ' has just banned "' .. nick ..'" (IP: ' .. ip .. ')with reason: "' .. reason ..'"');
              return 1;
        end

Return false to ignore the ban, otherwise return true.

**Input parameters:** **1=** op, **2=**ip, **3=** nick, **4=** reason

VH_OnUnBan
------------------
This method is called when an operator unbans a user. It returns the <code>op</code> who executed the command and user's<code>nick</code>. Return false to ignore the unban, otherwise return true. For example:

        function VH_OnUnBan (op, nick)
              VH:SendToOpChat('LOGGER: ' .. op .. ' has just unbanned "' .. nick ..'"');
              return 1;
        end

**Input parameters:** **1=** op, **2=** nick


> **Note** that in LUA functions you must put return 1 on the end of the function otherwise the hub will discard the action. 

> The input parameters are always strings and they never contains end-pipe

> You can also use **_PLUGINVERSION** or **_HUBVERSION** global variable which will give the plugin and VerliHub version respectively 
